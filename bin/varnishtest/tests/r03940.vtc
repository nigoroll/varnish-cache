varnishtest "test startup_timeout vs. stevedore init / open"

# we test with vtc_varnish and vtc_process because of different code
# paths in mgr for implicit start vs. cli start

####
# startup_timeout used, delay in stevedore init
varnish v1 -arg "-sdebug=debug,dinit=5s -pstartup_timeout=3s -pcli_timeout=2s" \
	-vcl "backend none none;"
varnish v1 -cliexpect \
	"Child failed on launch within startup_timeout=3.00s" \
	"start"
varnish v1 -expectexit 0x40

process p1 { varnishd \
	-sdebug=debug,dinit=5s \
	-pstartup_timeout=3s -pcli_timeout=2s \
	-n ${tmpdir}/p1 -a :0 -b none 2>&1 } -start
process p1 -expect-exit 0x2 -wait
process p1 -expect-text 0 0 \
	"Child failed on launch within startup_timeout=3.00s"

####
# cli_timeout used, delay in stevedore open

varnish v2 -arg "-sdebug=debug,dopen=5s -pstartup_timeout=2s -pcli_timeout=3s" \
	-vcl "backend none none;"
varnish v2 -cliexpect \
	"launch within cli_timeout=3.00s .tip: set startup_" \
	"start"
varnish v2 -cliok "panic.clear"
varnish v2 -expectexit 0x40

process p2 { varnishd \
	-sdebug=debug,dopen=5s \
	-pstartup_timeout=2s -pcli_timeout=3s \
	-n ${tmpdir}/p2 -a :0 -b none} -start
process p2 -expect-exit 0x2 -wait

# expect-text does not work here because the panic info pushes the
# error out of the emulated terminal's view.
# And I do not want to rely on any x lines to be enough
shell {grep -q "launch within cli_timeout=3.00s (tip: set startup_" ${p2_err}}
