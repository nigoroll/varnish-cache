varnishtest "VCL compiler coverage test: vcc_token.c"

varnish v1 -errvcl {Unterminated inline C source, starting at} " C{ "

varnish v1 -vcl {
	backend b { .host = "${localhost}"; }
	# comment
	sub vcl_recv { set req.url = "x"; }
}

varnish v1 -errvcl {Unterminated /* ... */ comment, starting at} {
	backend b { .host = "${localhost}"; }
	/*
}

varnish v1 -errvcl {Unterminated long-string, starting at} {
	backend b { .host = "${localhost}"; }
	{" }
}

varnish v1 -errvcl {Unterminated long-string, starting at} {
	backend b { .host = "${localhost}"; }
	""" ""
}

varnish v1 -errvcl {Unterminated string, starting at} {
	backend b { .host = "${localhost}"; }
	"
}

varnish v1 -cliok "param.set vcc_feature +allow_inline_c" -vcl {
	backend b { .host = "${localhost}"; }
	sub vcl_recv { C{ int i; (void)i; }C }
}

varnish v1 -errvcl {Syntax error at} {
	backend b { .host = "${localhost}"; }
	?
}

varnish v1 -errvcl {Comparison of different types: STRING '==' INT} {
	backend b { .host = "${localhost}"; }
	sub vcl_recv {
		if ("foo" + "bar" == 777) {
			set req.http.host = 1;
		}
	}
}

varnish v1 -errvcl {Comparison of different types: STRING '==' INT} {
	backend b { .host = "${localhost}"; }
	sub vcl_recv {
		if ("foo" + "bar" ==
		    777) {
			set req.http.host = 1;
		}
	}
}

varnish v1 -errvcl {Comparison of different types: STRING '==' INT} {
	backend b { .host = "${localhost}"; }
	sub vcl_recv {
		if ("foo" + "bar" ==


		    777) {
			set req.http.host = 1;
		}
	}
}

varnish v1 -vcl {
	import debug;
	backend be none;
	sub vcl_recv {
		if ("string" == "string") {
			return (fail("should compile"));
		}
	}
} -start

varnish v1 -vcl {
	import debug;
	backend be none;
	sub vcl_recv {
		if ("string" == debug.return_strands("string")) {
			return (fail("should compile"));
		}
	}
}

varnish v1 -vcl {
	import debug;
	backend be none;
	sub vcl_recv {
		if (debug.return_strands("string") == "string") {
			return (fail("should compile"));
		}
	}
}

varnish v1 -vcl {
	import debug;
	backend be none;
	sub vcl_recv {
		if (debug.return_strands("string") == debug.return_strands("string")) {
			return (fail("should compile"));
		}
	}
}

# regression test #4146
varnish v1 -vcl {
	import debug;
	backend be none;
	sub vcl_init {
		if (! debug.is_null_strands(debug.return_strands(debug.return_null_strands()))) {
			return (fail("should load"));
		}
	}
}

varnish v1 -errvcl {Symbol not found: 'req.http.req.http.foo'} {
	backend b { .host = "${localhost}"; }
	sub vcl_recv {
		set req.http.req.http.foo = "bar";
	}
}

varnish v1 -errvcl {Unknown token '--' when looking for INT} {
	backend be none;
	sub vcl_synth {
		set resp.status = --200;
	}
}

varnish v1 -errvcl "Syntax error" {
	import debug;
	backend be none;
	sub vcl_init {
		new _invalid = debug.obj();
	}
}
